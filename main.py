import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import WebAppInfo
# --- Sozlamalar ---
BOT_TOKEN = "8184663205:AAHbnwXBHjXHueyOBqiFN7d3TcBmorqSheA"
WEB_APP_URL = "https://tamerkhan.uz/player2.html"
DB_PATH = "users.db"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# --- Reklama jarayon holatlari ---
class Reklama(StatesGroup):
    login = State()
    password = State()
    media = State()

# --- Matnlar ---
TEXTS = {
    "uz": {
        "choose": "Tilni tanlang:",
        "welcome": "üëã üá∫üáø Xush kelibsiz!\nBu yerda siz bepul va pullik telekanallarni\n‚Äî butunlay bepul tomosha qilishingiz mumkin.\nTomosha qilishni boshlash uchun ¬´PLAY¬ª ‚ñ∂Ô∏è tugmasini bosing.",
        "auth_login": "Loginni kiriting:",
        "auth_pass": "Parolni kiriting:",
        "auth_fail": "Login yoki parol noto‚Äòg‚Äòri. /reklama bilan qayta urinib ko‚Äòring.",
        "ask_media": "Reklama uchun bitta rasm va (ixtiyoriy) matn yuboring.",
        "broadcast": "Reklama yuborildi: muvaffaqiyatli={ok}, xatolik={bad}.",
        "users": "Foydalanuvchilar soni: {count}"
    },
    "ru": {
        "choose": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "welcome": "üëã üá∑üá∫ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏ –ø–ª–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n–ù–∞–∂–º–∏—Ç–µ ¬´PLAY¬ª ‚ñ∂Ô∏è —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä.",
        "auth_login": "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:",
        "auth_pass": "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
        "auth_fail": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /reklama.",
        "ask_media": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ —Ä–µ–∫–ª–∞–º—ã –∏ —Ç–µ–∫—Å—Ç (–ø–æ –∂–µ–ª–∞–Ω–∏—é).",
        "broadcast": "–†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ={ok}, –æ—à–∏–±–∫–∏={bad}.",
        "users": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}"
    },
    "kz": {
        "choose": "–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        "welcome": "üëã üá∞üáø “ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!\n–ú“±–Ω–¥–∞ —Ç–µ–≥—ñ–Ω –∂”ô–Ω–µ –∞“õ—ã–ª—ã –∫–∞–Ω–∞–ª–¥–∞—Ä–¥—ã —Ç–µ–≥—ñ–Ω –∫”©—Ä–µ –∞–ª–∞—Å—ã–∑.\n–ë–∞—Å—Ç–∞—É “Ø—à—ñ–Ω ¬´PLAY¬ª ‚ñ∂Ô∏è –±–∞—Å—ã“£—ã–∑.",
        "auth_login": "–õ–æ–≥–∏–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        "auth_pass": "“ö“±–ø–∏—è—Å”©–∑ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        "auth_fail": "–õ–æ–≥–∏–Ω –Ω–µ–º–µ—Å–µ “õ“±–ø–∏—è—Å”©–∑ “õ–∞—Ç–µ. /reklama –∞—Ä“õ—ã–ª—ã “õ–∞–π—Ç–∞–ª–∞“£—ã–∑.",
        "ask_media": "–†–µ–∫–ª–∞–º–∞–Ω—ã“£ —Å—É—Ä–µ—Ç—ñ–Ω –∂”ô–Ω–µ –º”ô—Ç—ñ–Ω—ñ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.",
        "broadcast": "–†–µ–∫–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ: —Å”ô—Ç—Ç—ñ={ok}, “õ–∞—Ç–µ={bad}.",
        "users": "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã: {count}"
    },
    "kg": {
        "choose": "–¢–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞“£—ã–∑:",
        "welcome": "üëã üá∞üá¨ –ö–æ—à –∫–µ–ª–∏“£–∏–∑!\n–ë—É–ª –∂–µ—Ä–¥–µ –∞–∫—ã—Å—ã–∑ –∂–∞–Ω–∞ –∞–∫—ã —Ç”©–ª”©–Ω“Ø“Ø—á“Ø –∫–∞–Ω–∞–ª–¥–∞—Ä–¥—ã –∞–∫—ã—Å—ã–∑ –∫”©—Ä”© –∞–ª–∞—Å—ã–∑.\n–ë–∞—à—Ç–æ–æ “Ø—á“Ø–Ω ¬´PLAY¬ª ‚ñ∂Ô∏è –±–∞—Å—ã“£—ã–∑.",
        "auth_login": "–õ–æ–≥–∏–Ω–¥–∏ –∫–∏—Ä–≥–∏–∑–∏“£–∏–∑:",
        "auth_pass": "–ö—É–ø—É—è —Å”©–∑–¥“Ø –∫–∏—Ä–≥–∏–∑–∏“£–∏–∑:",
        "auth_fail": "–õ–æ–≥–∏–Ω –∂–µ –ø–∞—Ä–æ–ª—å —Ç—É—É—Ä–∞ —ç–º–µ—Å. /reklama –º–µ–Ω–µ–Ω –∫–∞–π—Ä—ã–ª—ã“£—ã–∑.",
        "ask_media": "–†–µ–∫–ª–∞–º–∞–ª—ã–∫ —Å“Ø—Ä”©—Ç—Ç“Ø –∂–∞–Ω–∞ —Ç–µ–∫—Å—Ç—Ç–∏ –∂–∏–±–µ—Ä–∏“£–∏–∑.",
        "broadcast": "–†–µ–∫–ª–∞–º–∞ –∂”©–Ω”©—Ç“Ø–ª–¥“Ø: –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø={ok}, –∫–∞—Ç–∞={bad}.",
        "users": "–ö–æ–ª–¥–æ–Ω—É—É—á—É–ª–∞—Ä —Å–∞–Ω—ã: {count}"
    },
    "en": {
        "choose": "Choose language:",
        "welcome": "üëã üá∫üá∏ Welcome!\nHere you can watch free and paid channels ‚Äî completely free.\nTo start watching press ¬´PLAY¬ª ‚ñ∂Ô∏è.",
        "auth_login": "Enter login:",
        "auth_pass": "Enter password:",
        "auth_fail": "Incorrect login or password. Use /reklama again.",
        "ask_media": "Send an ad photo and optional text.",
        "broadcast": "Broadcast finished: success={ok}, failed={bad}.",
        "users": "Number of users: {count}"
    }
}

# --- DB funksiyalar ---
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, lang TEXT)"
        )
        await db.commit()

async def add_user(user_id: int, lang="uz"):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id, lang) VALUES (?, ?)", (user_id, lang))
        await db.execute("UPDATE users SET lang=? WHERE user_id=?", (lang, user_id))
        await db.commit()

async def get_user_lang(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT lang FROM users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        return row[0] if row else "uz"

async def get_all_users():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT user_id FROM users")
        rows = await cur.fetchall()
        return [r[0] for r in rows]

async def count_users():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT COUNT(*) FROM users")
        r = await cur.fetchone()
        return r[0] or 0

# --- Tugmalar ---
def lang_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∫üáø O'zbek", callback_data="lang_uz"),
         InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton(text="üá∞üáø “ö–∞–∑–∞“õ", callback_data="lang_kz"),
         InlineKeyboardButton(text="üá∞üá¨ –ö—ã—Ä–≥—ã–∑", callback_data="lang_kg"),
         InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")]
    ])

def play_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="¬´PLAY¬ª ‚ñ∂Ô∏è", web_app=WebAppInfo(url=WEB_APP_URL))]
    ])

# --- Start ---
@router.message(Command("start"))
async def start_cmd(msg: Message):
    await add_user(msg.from_user.id)
    await msg.answer(TEXTS["uz"]["choose"], reply_markup=lang_keyboard())

@router.callback_query(F.data.startswith("lang_"))
async def lang_choice(cb: CallbackQuery):
    code = cb.data.split("_")[1]
    await add_user(cb.from_user.id, code)
    # ‚¨áÔ∏è Til tanlash xabarini o'chirib tashlash
    await cb.message.delete()
    # Xush kelibsiz xabarini yuborish
    await cb.message.answer(TEXTS[code]["welcome"], reply_markup=play_button())
    await cb.answer()

# --- Usersall ---
@router.message(Command("usersall"))
async def users_all(msg: Message):
    lang = await get_user_lang(msg.from_user.id)
    count = await count_users()
    await msg.answer(TEXTS[lang]["users"].format(count=count))

# --- Reklama ---
@router.message(Command("reklama"))
async def reklama_start(msg: Message, state: FSMContext):
    lang = await get_user_lang(msg.from_user.id)
    await msg.answer(TEXTS[lang]["auth_login"])
    await state.set_state(Reklama.login)

@router.message(Reklama.login)
async def reklama_login(msg: Message, state: FSMContext):
    await state.update_data(login=msg.text.strip())
    lang = await get_user_lang(msg.from_user.id)
    await msg.answer(TEXTS[lang]["auth_pass"])
    await state.set_state(Reklama.password)

@router.message(Reklama.password)
async def reklama_pass(msg: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("login") == "admin" and msg.text.strip() == "admin":
        lang = await get_user_lang(msg.from_user.id)
        await msg.answer(TEXTS[lang]["ask_media"])
        await state.set_state(Reklama.media)
    else:
        lang = await get_user_lang(msg.from_user.id)
        await msg.answer(TEXTS[lang]["auth_fail"])
        await state.clear()

@router.message(Reklama.media, F.photo)
async def reklama_media(msg: Message, state: FSMContext):
    photo_id = msg.photo[-1].file_id
    caption = msg.caption or ""
    users = await get_all_users()
    ok, bad = 0, 0
    for uid in users:
        try:
            await bot.send_photo(uid, photo=photo_id, caption=caption)
            ok += 1
            await asyncio.sleep(0.05)
        except:
            bad += 1
    lang = await get_user_lang(msg.from_user.id)
    await msg.answer(TEXTS[lang]["broadcast"].format(ok=ok, bad=bad))
    await state.clear()

@router.message(Reklama.media)
async def reklama_not_photo(msg: Message):
    lang = await get_user_lang(msg.from_user.id)
    await msg.answer(TEXTS[lang]["ask_media"])

# --- Foydalanuvchini saqlash ---
@router.message()
async def catch_all(msg: Message):
    await add_user(msg.from_user.id)

# --- Bot ishga tushirish ---
async def main():
    await init_db()
    print("Bot ishga tushdi...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
